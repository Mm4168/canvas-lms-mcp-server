import { CanvasAPIResponse, CanvasCourse, CanvasUser, CanvasAssignment, CanvasSubmission, CanvasFile, CanvasEnrollment, CanvasAccessToken } from './types/canvas';
export declare class CanvasAPIClient {
    private client;
    private accessToken;
    private baseUrl;
    constructor(accessToken: string, baseUrl?: string);
    private setupInterceptors;
    private delay;
    private transformError;
    private parsePaginationLinks;
    private makeRequest;
    getCurrentUser(): Promise<CanvasAPIResponse<CanvasUser>>;
    getUser(userId: number): Promise<CanvasAPIResponse<CanvasUser>>;
    getUserCourses(userId?: number, params?: {
        enrollment_type?: string;
        enrollment_role?: string;
        enrollment_role_id?: number;
        enrollment_state?: string;
        exclude?: string[];
        include?: string[];
        state?: string[];
    }): Promise<CanvasAPIResponse<CanvasCourse[]>>;
    getCourse(courseId: number, include?: string[]): Promise<CanvasAPIResponse<CanvasCourse>>;
    getCourses(params?: {
        enrollment_type?: string;
        enrollment_role?: string;
        enrollment_state?: string;
        exclude?: string[];
        include?: string[];
        state?: string[];
        per_page?: number;
        page?: number;
    }): Promise<CanvasAPIResponse<CanvasCourse[]>>;
    createCourse(accountId: number, courseData: {
        name: string;
        course_code: string;
        start_at?: string;
        end_at?: string;
        license?: string;
        is_public?: boolean;
        is_public_to_auth_users?: boolean;
        public_syllabus?: boolean;
        public_syllabus_to_auth?: boolean;
        public_description?: string;
        allow_student_wiki_edits?: boolean;
        allow_wiki_comments?: boolean;
        allow_student_forum_attachments?: boolean;
        open_enrollment?: boolean;
        self_enrollment?: boolean;
        restrict_enrollments_to_course_dates?: boolean;
        term_id?: number;
        sis_course_id?: string;
        integration_id?: string;
        hide_final_grades?: boolean;
        apply_assignment_group_weights?: boolean;
        time_zone?: string;
    }): Promise<CanvasAPIResponse<CanvasCourse>>;
    updateCourse(courseId: number, courseData: Partial<{
        name: string;
        course_code: string;
        start_at: string;
        end_at: string;
        license: string;
        is_public: boolean;
        is_public_to_auth_users: boolean;
        public_syllabus: boolean;
        public_syllabus_to_auth: boolean;
        public_description: string;
        allow_student_wiki_edits: boolean;
        allow_wiki_comments: boolean;
        allow_student_forum_attachments: boolean;
        open_enrollment: boolean;
        self_enrollment: boolean;
        restrict_enrollments_to_course_dates: boolean;
        hide_final_grades: boolean;
        apply_assignment_group_weights: boolean;
        time_zone: string;
        default_view: string;
        syllabus_body: string;
        grading_standard_id: number;
        course_format: string;
    }>): Promise<CanvasAPIResponse<CanvasCourse>>;
    getAssignments(courseId: number, params?: {
        include?: string[];
        search_term?: string;
        override_assignment_dates?: boolean;
        needs_grading_count_by_section?: boolean;
        bucket?: string;
        assignment_ids?: number[];
        order_by?: string;
        post_to_sis?: boolean;
        new_quizzes?: boolean;
        per_page?: number;
        page?: number;
    }): Promise<CanvasAPIResponse<CanvasAssignment[]>>;
    getAssignment(courseId: number, assignmentId: number, include?: string[]): Promise<CanvasAPIResponse<CanvasAssignment>>;
    createAssignment(courseId: number, assignmentData: {
        name: string;
        position?: number;
        submission_types?: string[];
        allowed_extensions?: string[];
        turnitin_enabled?: boolean;
        vericite_enabled?: boolean;
        turnitin_settings?: Record<string, any>;
        integration_data?: Record<string, any>;
        integration_id?: string;
        peer_reviews?: boolean;
        automatic_peer_reviews?: boolean;
        notify_of_update?: boolean;
        group_category_id?: number;
        grade_group_students_individually?: boolean;
        external_tool_tag_attributes?: Record<string, any>;
        points_possible?: number;
        grading_type?: string;
        due_at?: string;
        lock_at?: string;
        unlock_at?: string;
        description?: string;
        assignment_group_id?: number;
        assignment_overrides?: any[];
        only_visible_to_overrides?: boolean;
        published?: boolean;
        grading_standard_id?: number;
        omit_from_final_grade?: boolean;
        quiz_lti?: boolean;
        moderated_grading?: boolean;
        grader_count?: number;
        final_grader_id?: number;
        grader_comments_visible_to_graders?: boolean;
        graders_anonymous_to_graders?: boolean;
        grader_names_visible_to_final_grader?: boolean;
        anonymous_grading?: boolean;
        allowed_attempts?: number;
        annotatable_attachment_id?: number;
    }): Promise<CanvasAPIResponse<CanvasAssignment>>;
    updateAssignment(courseId: number, assignmentId: number, assignmentData: Partial<{
        name: string;
        position: number;
        submission_types: string[];
        allowed_extensions: string[];
        turnitin_enabled: boolean;
        vericite_enabled: boolean;
        turnitin_settings: Record<string, any>;
        integration_data: Record<string, any>;
        integration_id: string;
        peer_reviews: boolean;
        automatic_peer_reviews: boolean;
        notify_of_update: boolean;
        group_category_id: number;
        grade_group_students_individually: boolean;
        external_tool_tag_attributes: Record<string, any>;
        points_possible: number;
        grading_type: string;
        due_at: string;
        lock_at: string;
        unlock_at: string;
        description: string;
        assignment_group_id: number;
        assignment_overrides: any[];
        only_visible_to_overrides: boolean;
        published: boolean;
        grading_standard_id: number;
        omit_from_final_grade: boolean;
        quiz_lti: boolean;
        moderated_grading: boolean;
        grader_count: number;
        final_grader_id: number;
        grader_comments_visible_to_graders: boolean;
        graders_anonymous_to_graders: boolean;
        grader_names_visible_to_final_grader: boolean;
        anonymous_grading: boolean;
        allowed_attempts: number;
    }>): Promise<CanvasAPIResponse<CanvasAssignment>>;
    deleteAssignment(courseId: number, assignmentId: number): Promise<CanvasAPIResponse<CanvasAssignment>>;
    getSubmissions(courseId: number, assignmentId: number, params?: {
        include?: string[];
        grouped?: boolean;
        post_to_sis?: boolean;
        submitted_since?: string;
        graded_since?: string;
        grading_period_id?: number;
        workflow_state?: string;
        enrollment_state?: string;
        state_based_on_date?: boolean;
        order?: string;
        order_direction?: string;
        anonymous_id?: string;
        per_page?: number;
        page?: number;
    }): Promise<CanvasAPIResponse<CanvasSubmission[]>>;
    getSubmission(courseId: number, assignmentId: number, userId: number, include?: string[]): Promise<CanvasAPIResponse<CanvasSubmission>>;
    gradeSubmission(courseId: number, assignmentId: number, userId: number, gradeData: {
        posted_grade?: string;
        excuse?: boolean;
        rubric_assessment?: Record<string, any>;
        comment?: {
            text_comment?: string;
            group_comment?: boolean;
            media_comment_id?: string;
            media_comment_type?: string;
            file_ids?: number[];
        };
    }): Promise<CanvasAPIResponse<CanvasSubmission>>;
    getEnrollments(courseId: number, params?: {
        type?: string[];
        role?: string[];
        state?: string[];
        include?: string[];
        user_id?: number;
        grading_period_id?: number;
        enrollment_term_id?: number;
        sis_account_id?: string[];
        sis_course_id?: string[];
        sis_section_id?: string[];
        sis_user_id?: string[];
        created_for_sis_id?: boolean;
        per_page?: number;
        page?: number;
    }): Promise<CanvasAPIResponse<CanvasEnrollment[]>>;
    enrollUser(courseId: number, enrollmentData: {
        user_id?: number;
        type: string;
        role?: string;
        role_id?: number;
        enrollment_state?: string;
        course_section_id?: number;
        limit_privileges_to_course_section?: boolean;
        notify?: boolean;
        self_enrollment_code?: string;
        self_enrolled?: boolean;
        associated_user_id?: number;
    }): Promise<CanvasAPIResponse<CanvasEnrollment>>;
    updateEnrollment(courseId: number, enrollmentId: number, enrollmentData: {
        enrollment_state?: string;
        course_section_id?: number;
        limit_privileges_to_course_section?: boolean;
        associated_user_id?: number;
    }): Promise<CanvasAPIResponse<CanvasEnrollment>>;
    deleteEnrollment(courseId: number, enrollmentId: number, task?: 'conclude' | 'delete' | 'inactivate' | 'deactivate'): Promise<CanvasAPIResponse<CanvasEnrollment>>;
    getFiles(courseId: number, params?: {
        content_types?: string[];
        exclude_content_types?: string[];
        search_term?: string;
        include?: string[];
        only?: string[];
        sort?: string;
        order?: string;
        per_page?: number;
        page?: number;
    }): Promise<CanvasAPIResponse<CanvasFile[]>>;
    getFile(fileId: number, include?: string[]): Promise<CanvasAPIResponse<CanvasFile>>;
    validateToken(): Promise<boolean>;
    getTokenInfo(): Promise<CanvasAccessToken | null>;
}
export default CanvasAPIClient;
//# sourceMappingURL=canvasClient.d.ts.map